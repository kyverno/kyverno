name: Cherry-pick on PR merge

on:
  pull_request:
    types: [closed]

jobs:
  # In case we use the /cherry-pick in unmerged PR, wait for user to merge it
  # look for comments wit cherry-picking slash command
  # and cherry-pick as we would do normally
  cherry-pick:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: read
    steps:
      - name: Fetch cherry-pick targets from comments
        id: cherry
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number
            });
            
            const branches = new Set();
            for (const comment of comments.data) {
              const match = comment.body.match(/^\/cherry-pick\s+(\S+)/);
              if (match) {
                branches.add(match[1]);
              }
            }
            return Array.from(branches);

      - name: Checkout repository
        if: steps.cherry.outputs.result != '[]'
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Cherry-pick to each branch
        if: steps.cherry.outputs.result != '[]'
        uses: ./.github/actions/cherry-pick
        with:
          github-token: ${{ secrets.PR_UPDATE_TOKEN }}
          source-pr: ${{ github.event.pull_request.number }}
          source-pr-title: ${{ github.event.pull_request.title }}
          target-branches: ${{ fromJSON(steps.cherry.outputs.result)[0] }}
          merge-commit: ${{ github.event.pull_request.merge_commit_sha }}
