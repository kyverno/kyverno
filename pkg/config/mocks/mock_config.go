// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/config/config.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	config "github.com/kyverno/kyverno/pkg/config"
	v1 "k8s.io/api/admissionregistration/v1"
	v10 "k8s.io/api/core/v1"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
)

// MockConfiguration is a mock of Configuration interface.
type MockConfiguration struct {
	ctrl     *gomock.Controller
	recorder *MockConfigurationMockRecorder
}

// MockConfigurationMockRecorder is the mock recorder for MockConfiguration.
type MockConfigurationMockRecorder struct {
	mock *MockConfiguration
}

// NewMockConfiguration creates a new mock instance.
func NewMockConfiguration(ctrl *gomock.Controller) *MockConfiguration {
	mock := &MockConfiguration{ctrl: ctrl}
	mock.recorder = &MockConfigurationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfiguration) EXPECT() *MockConfigurationMockRecorder {
	return m.recorder
}

// GetDefaultRegistry mocks base method.
func (m *MockConfiguration) GetDefaultRegistry() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultRegistry")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDefaultRegistry indicates an expected call of GetDefaultRegistry.
func (mr *MockConfigurationMockRecorder) GetDefaultRegistry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultRegistry", reflect.TypeOf((*MockConfiguration)(nil).GetDefaultRegistry))
}

// GetEnableDefaultRegistryMutation mocks base method.
func (m *MockConfiguration) GetEnableDefaultRegistryMutation() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnableDefaultRegistryMutation")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetEnableDefaultRegistryMutation indicates an expected call of GetEnableDefaultRegistryMutation.
func (mr *MockConfigurationMockRecorder) GetEnableDefaultRegistryMutation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnableDefaultRegistryMutation", reflect.TypeOf((*MockConfiguration)(nil).GetEnableDefaultRegistryMutation))
}

// GetGenerateSuccessEvents mocks base method.
func (m *MockConfiguration) GetGenerateSuccessEvents() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGenerateSuccessEvents")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetGenerateSuccessEvents indicates an expected call of GetGenerateSuccessEvents.
func (mr *MockConfigurationMockRecorder) GetGenerateSuccessEvents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGenerateSuccessEvents", reflect.TypeOf((*MockConfiguration)(nil).GetGenerateSuccessEvents))
}

// GetMatchConditions mocks base method.
func (m *MockConfiguration) GetMatchConditions() []v1.MatchCondition {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatchConditions")
	ret0, _ := ret[0].([]v1.MatchCondition)
	return ret0
}

// GetMatchConditions indicates an expected call of GetMatchConditions.
func (mr *MockConfigurationMockRecorder) GetMatchConditions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchConditions", reflect.TypeOf((*MockConfiguration)(nil).GetMatchConditions))
}

// GetUpdateRequestThreshold mocks base method.
func (m *MockConfiguration) GetUpdateRequestThreshold() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpdateRequestThreshold")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetUpdateRequestThreshold indicates an expected call of GetUpdateRequestThreshold.
func (mr *MockConfigurationMockRecorder) GetUpdateRequestThreshold() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdateRequestThreshold", reflect.TypeOf((*MockConfiguration)(nil).GetUpdateRequestThreshold))
}

// GetWebhook mocks base method.
func (m *MockConfiguration) GetWebhook() config.WebhookConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebhook")
	ret0, _ := ret[0].(config.WebhookConfig)
	return ret0
}

// GetWebhook indicates an expected call of GetWebhook.
func (mr *MockConfigurationMockRecorder) GetWebhook() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhook", reflect.TypeOf((*MockConfiguration)(nil).GetWebhook))
}

// GetWebhookAnnotations mocks base method.
func (m *MockConfiguration) GetWebhookAnnotations() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebhookAnnotations")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetWebhookAnnotations indicates an expected call of GetWebhookAnnotations.
func (mr *MockConfigurationMockRecorder) GetWebhookAnnotations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhookAnnotations", reflect.TypeOf((*MockConfiguration)(nil).GetWebhookAnnotations))
}

// GetWebhookLabels mocks base method.
func (m *MockConfiguration) GetWebhookLabels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebhookLabels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetWebhookLabels indicates an expected call of GetWebhookLabels.
func (mr *MockConfigurationMockRecorder) GetWebhookLabels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhookLabels", reflect.TypeOf((*MockConfiguration)(nil).GetWebhookLabels))
}

// IsExcluded mocks base method.
func (m *MockConfiguration) IsExcluded(username string, groups, roles, clusterroles []string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExcluded", username, groups, roles, clusterroles)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsExcluded indicates an expected call of IsExcluded.
func (mr *MockConfigurationMockRecorder) IsExcluded(username, groups, roles, clusterroles interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExcluded", reflect.TypeOf((*MockConfiguration)(nil).IsExcluded), username, groups, roles, clusterroles)
}

// Load mocks base method.
func (m *MockConfiguration) Load(arg0 *v10.ConfigMap) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Load", arg0)
}

// Load indicates an expected call of Load.
func (mr *MockConfigurationMockRecorder) Load(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockConfiguration)(nil).Load), arg0)
}

// OnChanged mocks base method.
func (m *MockConfiguration) OnChanged(arg0 func()) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnChanged", arg0)
}

// OnChanged indicates an expected call of OnChanged.
func (mr *MockConfigurationMockRecorder) OnChanged(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnChanged", reflect.TypeOf((*MockConfiguration)(nil).OnChanged), arg0)
}

// ToFilter mocks base method.
func (m *MockConfiguration) ToFilter(kind schema.GroupVersionKind, subresource, namespace, name string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToFilter", kind, subresource, namespace, name)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ToFilter indicates an expected call of ToFilter.
func (mr *MockConfigurationMockRecorder) ToFilter(kind, subresource, namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToFilter", reflect.TypeOf((*MockConfiguration)(nil).ToFilter), kind, subresource, namespace, name)
}
