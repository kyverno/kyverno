package policy

import (
	"context"

	kyvernov2 "github.com/kyverno/kyverno/api/kyverno/v2"
	policiesv1alpha1 "github.com/kyverno/kyverno/api/policies.kyverno.io/v1alpha1"
	generateutils "github.com/kyverno/kyverno/pkg/background/generate"
	"github.com/kyverno/kyverno/pkg/config"
	engineapi "github.com/kyverno/kyverno/pkg/engine/api"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

func (pc *policyController) createURForGeneratingPolicy(gpol *policiesv1alpha1.GeneratingPolicy) error {
	ur := newGenerateUR(engineapi.NewGeneratingPolicy(gpol))
	// get the downstream resources that are generated by the gpol
	downstreams := pc.watchManager.GetDownstreams(gpol.GetName())
	if len(downstreams) == 0 {
		return nil
	}

	pc.log.V(4).Info("sync gpol changes to downstream targets")
	for _, downstream := range downstreams {
		labels := downstream.GetLabels()
		// fetch the trigger resource labels from the downstream resource to build the UR
		trigger := generateutils.TriggerFromLabels(labels)
		addRuleContext(ur, gpol.GetName(), trigger, false)
	}
	// delete the downstream resources that are generated by the gpol
	pc.watchManager.DeleteDownstreams(gpol.GetName())
	// generate the UR to create the new downstream resources
	created, err := pc.urGenerator.Generate(context.TODO(), pc.kyvernoClient, ur, pc.log)
	if err != nil {
		return err
	}
	if created != nil {
		updated := created.DeepCopy()
		updated.Status.State = kyvernov2.Pending
		_, err = pc.kyvernoClient.KyvernoV2().UpdateRequests(config.KyvernoNamespace()).UpdateStatus(context.TODO(), updated, metav1.UpdateOptions{})
		if err != nil {
			return nil
		}
	}
	return nil
}
