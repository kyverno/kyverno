/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// CloneListApplyConfiguration represents an declarative configuration of the CloneList type for use
// with apply.
type CloneListApplyConfiguration struct {
	Namespace *string           `json:"namespace,omitempty"`
	Kinds     []string          `json:"kinds,omitempty"`
	Selector  *v1.LabelSelector `json:"selector,omitempty"`
}

// CloneListApplyConfiguration constructs an declarative configuration of the CloneList type for use with
// apply.
func CloneList() *CloneListApplyConfiguration {
	return &CloneListApplyConfiguration{}
}

// WithNamespace sets the Namespace field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Namespace field is set to the value of the last call.
func (b *CloneListApplyConfiguration) WithNamespace(value string) *CloneListApplyConfiguration {
	b.Namespace = &value
	return b
}

// WithKinds adds the given value to the Kinds field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Kinds field.
func (b *CloneListApplyConfiguration) WithKinds(values ...string) *CloneListApplyConfiguration {
	for i := range values {
		b.Kinds = append(b.Kinds, values[i])
	}
	return b
}

// WithSelector sets the Selector field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Selector field is set to the value of the last call.
func (b *CloneListApplyConfiguration) WithSelector(value v1.LabelSelector) *CloneListApplyConfiguration {
	b.Selector = &value
	return b
}
