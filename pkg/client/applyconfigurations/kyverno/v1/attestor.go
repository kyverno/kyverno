/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	apiextensionsv1 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
)

// AttestorApplyConfiguration represents an declarative configuration of the Attestor type for use
// with apply.
type AttestorApplyConfiguration struct {
	Keys         *StaticKeyAttestorApplyConfiguration   `json:"keys,omitempty"`
	Certificates *CertificateAttestorApplyConfiguration `json:"certificates,omitempty"`
	Keyless      *KeylessAttestorApplyConfiguration     `json:"keyless,omitempty"`
	Attestor     *apiextensionsv1.JSON                  `json:"attestor,omitempty"`
	Annotations  map[string]string                      `json:"annotations,omitempty"`
	Repository   *string                                `json:"repository,omitempty"`
}

// AttestorApplyConfiguration constructs an declarative configuration of the Attestor type for use with
// apply.
func Attestor() *AttestorApplyConfiguration {
	return &AttestorApplyConfiguration{}
}

// WithKeys sets the Keys field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Keys field is set to the value of the last call.
func (b *AttestorApplyConfiguration) WithKeys(value *StaticKeyAttestorApplyConfiguration) *AttestorApplyConfiguration {
	b.Keys = value
	return b
}

// WithCertificates sets the Certificates field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Certificates field is set to the value of the last call.
func (b *AttestorApplyConfiguration) WithCertificates(value *CertificateAttestorApplyConfiguration) *AttestorApplyConfiguration {
	b.Certificates = value
	return b
}

// WithKeyless sets the Keyless field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Keyless field is set to the value of the last call.
func (b *AttestorApplyConfiguration) WithKeyless(value *KeylessAttestorApplyConfiguration) *AttestorApplyConfiguration {
	b.Keyless = value
	return b
}

// WithAttestor sets the Attestor field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Attestor field is set to the value of the last call.
func (b *AttestorApplyConfiguration) WithAttestor(value apiextensionsv1.JSON) *AttestorApplyConfiguration {
	b.Attestor = &value
	return b
}

// WithAnnotations puts the entries into the Annotations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Annotations field,
// overwriting an existing map entries in Annotations field with the same key.
func (b *AttestorApplyConfiguration) WithAnnotations(entries map[string]string) *AttestorApplyConfiguration {
	if b.Annotations == nil && len(entries) > 0 {
		b.Annotations = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Annotations[k] = v
	}
	return b
}

// WithRepository sets the Repository field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Repository field is set to the value of the last call.
func (b *AttestorApplyConfiguration) WithRepository(value string) *AttestorApplyConfiguration {
	b.Repository = &value
	return b
}
