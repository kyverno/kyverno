/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	apiextensionsv1 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
)

// MutationApplyConfiguration represents an declarative configuration of the Mutation type for use
// with apply.
type MutationApplyConfiguration struct {
	MutateExistingOnPolicyUpdate *bool                                  `json:"mutateExistingOnPolicyUpdate,omitempty"`
	Targets                      []TargetResourceSpecApplyConfiguration `json:"targets,omitempty"`
	RawPatchStrategicMerge       *apiextensionsv1.JSON                  `json:"patchStrategicMerge,omitempty"`
	PatchesJSON6902              *string                                `json:"patchesJson6902,omitempty"`
	ForEachMutation              []ForEachMutationApplyConfiguration    `json:"foreach,omitempty"`
}

// MutationApplyConfiguration constructs an declarative configuration of the Mutation type for use with
// apply.
func Mutation() *MutationApplyConfiguration {
	return &MutationApplyConfiguration{}
}

// WithMutateExistingOnPolicyUpdate sets the MutateExistingOnPolicyUpdate field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MutateExistingOnPolicyUpdate field is set to the value of the last call.
func (b *MutationApplyConfiguration) WithMutateExistingOnPolicyUpdate(value bool) *MutationApplyConfiguration {
	b.MutateExistingOnPolicyUpdate = &value
	return b
}

// WithTargets adds the given value to the Targets field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Targets field.
func (b *MutationApplyConfiguration) WithTargets(values ...*TargetResourceSpecApplyConfiguration) *MutationApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithTargets")
		}
		b.Targets = append(b.Targets, *values[i])
	}
	return b
}

// WithRawPatchStrategicMerge sets the RawPatchStrategicMerge field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RawPatchStrategicMerge field is set to the value of the last call.
func (b *MutationApplyConfiguration) WithRawPatchStrategicMerge(value apiextensionsv1.JSON) *MutationApplyConfiguration {
	b.RawPatchStrategicMerge = &value
	return b
}

// WithPatchesJSON6902 sets the PatchesJSON6902 field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PatchesJSON6902 field is set to the value of the last call.
func (b *MutationApplyConfiguration) WithPatchesJSON6902(value string) *MutationApplyConfiguration {
	b.PatchesJSON6902 = &value
	return b
}

// WithForEachMutation adds the given value to the ForEachMutation field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ForEachMutation field.
func (b *MutationApplyConfiguration) WithForEachMutation(values ...*ForEachMutationApplyConfiguration) *MutationApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithForEachMutation")
		}
		b.ForEachMutation = append(b.ForEachMutation, *values[i])
	}
	return b
}
