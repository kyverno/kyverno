/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	kyvernov1 "github.com/kyverno/kyverno/api/kyverno/v1"
)

// ManifestsApplyConfiguration represents an declarative configuration of the Manifests type for use
// with apply.
type ManifestsApplyConfiguration struct {
	Attestors        []AttestorSetApplyConfiguration `json:"attestors,omitempty"`
	AnnotationDomain *string                         `json:"annotationDomain,omitempty"`
	IgnoreFields     *kyvernov1.IgnoreFieldList      `json:"ignoreFields,omitempty"`
	DryRunOption     *DryRunOptionApplyConfiguration `json:"dryRun,omitempty"`
	Repository       *string                         `json:"repository,omitempty"`
}

// ManifestsApplyConfiguration constructs an declarative configuration of the Manifests type for use with
// apply.
func Manifests() *ManifestsApplyConfiguration {
	return &ManifestsApplyConfiguration{}
}

// WithAttestors adds the given value to the Attestors field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Attestors field.
func (b *ManifestsApplyConfiguration) WithAttestors(values ...*AttestorSetApplyConfiguration) *ManifestsApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithAttestors")
		}
		b.Attestors = append(b.Attestors, *values[i])
	}
	return b
}

// WithAnnotationDomain sets the AnnotationDomain field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AnnotationDomain field is set to the value of the last call.
func (b *ManifestsApplyConfiguration) WithAnnotationDomain(value string) *ManifestsApplyConfiguration {
	b.AnnotationDomain = &value
	return b
}

// WithIgnoreFields sets the IgnoreFields field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IgnoreFields field is set to the value of the last call.
func (b *ManifestsApplyConfiguration) WithIgnoreFields(value kyvernov1.IgnoreFieldList) *ManifestsApplyConfiguration {
	b.IgnoreFields = &value
	return b
}

// WithDryRunOption sets the DryRunOption field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DryRunOption field is set to the value of the last call.
func (b *ManifestsApplyConfiguration) WithDryRunOption(value *DryRunOptionApplyConfiguration) *ManifestsApplyConfiguration {
	b.DryRunOption = value
	return b
}

// WithRepository sets the Repository field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Repository field is set to the value of the last call.
func (b *ManifestsApplyConfiguration) WithRepository(value string) *ManifestsApplyConfiguration {
	b.Repository = &value
	return b
}
