/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v2

import (
	v2 "github.com/kyverno/kyverno/api/kyverno/v2"
	v1 "github.com/kyverno/kyverno/pkg/client/applyconfigurations/kyverno/v1"
)

// UpdateRequestSpecApplyConfiguration represents an declarative configuration of the UpdateRequestSpec type for use
// with apply.
type UpdateRequestSpecApplyConfiguration struct {
	Type             *v2.RequestType                             `json:"requestType,omitempty"`
	Policy           *string                                     `json:"policy,omitempty"`
	Rule             *string                                     `json:"rule,omitempty"`
	DeleteDownstream *bool                                       `json:"deleteDownstream,omitempty"`
	Synchronize      *bool                                       `json:"synchronize,omitempty"`
	Resource         *v1.ResourceSpecApplyConfiguration          `json:"resource,omitempty"`
	Context          *UpdateRequestSpecContextApplyConfiguration `json:"context,omitempty"`
}

// UpdateRequestSpecApplyConfiguration constructs an declarative configuration of the UpdateRequestSpec type for use with
// apply.
func UpdateRequestSpec() *UpdateRequestSpecApplyConfiguration {
	return &UpdateRequestSpecApplyConfiguration{}
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *UpdateRequestSpecApplyConfiguration) WithType(value v2.RequestType) *UpdateRequestSpecApplyConfiguration {
	b.Type = &value
	return b
}

// WithPolicy sets the Policy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Policy field is set to the value of the last call.
func (b *UpdateRequestSpecApplyConfiguration) WithPolicy(value string) *UpdateRequestSpecApplyConfiguration {
	b.Policy = &value
	return b
}

// WithRule sets the Rule field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Rule field is set to the value of the last call.
func (b *UpdateRequestSpecApplyConfiguration) WithRule(value string) *UpdateRequestSpecApplyConfiguration {
	b.Rule = &value
	return b
}

// WithDeleteDownstream sets the DeleteDownstream field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DeleteDownstream field is set to the value of the last call.
func (b *UpdateRequestSpecApplyConfiguration) WithDeleteDownstream(value bool) *UpdateRequestSpecApplyConfiguration {
	b.DeleteDownstream = &value
	return b
}

// WithSynchronize sets the Synchronize field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Synchronize field is set to the value of the last call.
func (b *UpdateRequestSpecApplyConfiguration) WithSynchronize(value bool) *UpdateRequestSpecApplyConfiguration {
	b.Synchronize = &value
	return b
}

// WithResource sets the Resource field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Resource field is set to the value of the last call.
func (b *UpdateRequestSpecApplyConfiguration) WithResource(value *v1.ResourceSpecApplyConfiguration) *UpdateRequestSpecApplyConfiguration {
	b.Resource = value
	return b
}

// WithContext sets the Context field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Context field is set to the value of the last call.
func (b *UpdateRequestSpecApplyConfiguration) WithContext(value *UpdateRequestSpecContextApplyConfiguration) *UpdateRequestSpecApplyConfiguration {
	b.Context = value
	return b
}
