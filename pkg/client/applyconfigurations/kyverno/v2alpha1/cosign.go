/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v2alpha1

// CosignApplyConfiguration represents an declarative configuration of the Cosign type for use
// with apply.
type CosignApplyConfiguration struct {
	Key         *KeyApplyConfiguration         `json:"key,omitempty"`
	Keyless     *KeylessApplyConfiguration     `json:"keyless,omitempty"`
	Certificate *CertificateApplyConfiguration `json:"certificate,omitempty"`
	Sources     []SourceApplyConfiguration     `json:"source,omitempty"`
	CTLog       *CTLogApplyConfiguration       `json:"ctlog,omitempty"`
	TUF         *TUFApplyConfiguration         `json:"tuf,omitempty"`
}

// CosignApplyConfiguration constructs an declarative configuration of the Cosign type for use with
// apply.
func Cosign() *CosignApplyConfiguration {
	return &CosignApplyConfiguration{}
}

// WithKey sets the Key field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Key field is set to the value of the last call.
func (b *CosignApplyConfiguration) WithKey(value *KeyApplyConfiguration) *CosignApplyConfiguration {
	b.Key = value
	return b
}

// WithKeyless sets the Keyless field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Keyless field is set to the value of the last call.
func (b *CosignApplyConfiguration) WithKeyless(value *KeylessApplyConfiguration) *CosignApplyConfiguration {
	b.Keyless = value
	return b
}

// WithCertificate sets the Certificate field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Certificate field is set to the value of the last call.
func (b *CosignApplyConfiguration) WithCertificate(value *CertificateApplyConfiguration) *CosignApplyConfiguration {
	b.Certificate = value
	return b
}

// WithSources adds the given value to the Sources field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Sources field.
func (b *CosignApplyConfiguration) WithSources(values ...*SourceApplyConfiguration) *CosignApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithSources")
		}
		b.Sources = append(b.Sources, *values[i])
	}
	return b
}

// WithCTLog sets the CTLog field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CTLog field is set to the value of the last call.
func (b *CosignApplyConfiguration) WithCTLog(value *CTLogApplyConfiguration) *CosignApplyConfiguration {
	b.CTLog = value
	return b
}

// WithTUF sets the TUF field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TUF field is set to the value of the last call.
func (b *CosignApplyConfiguration) WithTUF(value *TUFApplyConfiguration) *CosignApplyConfiguration {
	b.TUF = value
	return b
}
