/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/api/admissionregistration/v1"
)

// ImageVerificationPolicySpecApplyConfiguration represents an declarative configuration of the ImageVerificationPolicySpec type for use
// with apply.
type ImageVerificationPolicySpecApplyConfiguration struct {
	MatchConstraints *v1.MatchResources              `json:"matchConstraints,omitempty"`
	FailurePolicy    *v1.FailurePolicyType           `json:"failurePolicy,omitempty"`
	ValidationAction []v1.ValidationAction           `json:"validationActions,omitempty"`
	MatchConditions  []v1.MatchCondition             `json:"matchConditions,omitempty"`
	Variables        []v1.Variable                   `json:"variables,omitempty"`
	ImageRules       []ImageRuleApplyConfiguration   `json:"imageRules,omitempty"`
	MutateDigest     *bool                           `json:"mutateDigest,omitempty"`
	VerifyDigest     *bool                           `json:"verifyDigest,omitempty"`
	Required         *bool                           `json:"required,omitempty"`
	Credentials      *CredentialsApplyConfiguration  `json:"credentials,omitempty"`
	Images           []ImageApplyConfiguration       `json:"images,omitempty"`
	Attestors        []AttestorApplyConfiguration    `json:"attestors,omitempty"`
	Attestations     []AttestationApplyConfiguration `json:"attestations,omitempty"`
	Verifications    []v1.Validation                 `json:"verifications,omitempty"`
}

// ImageVerificationPolicySpecApplyConfiguration constructs an declarative configuration of the ImageVerificationPolicySpec type for use with
// apply.
func ImageVerificationPolicySpec() *ImageVerificationPolicySpecApplyConfiguration {
	return &ImageVerificationPolicySpecApplyConfiguration{}
}

// WithMatchConstraints sets the MatchConstraints field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MatchConstraints field is set to the value of the last call.
func (b *ImageVerificationPolicySpecApplyConfiguration) WithMatchConstraints(value v1.MatchResources) *ImageVerificationPolicySpecApplyConfiguration {
	b.MatchConstraints = &value
	return b
}

// WithFailurePolicy sets the FailurePolicy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FailurePolicy field is set to the value of the last call.
func (b *ImageVerificationPolicySpecApplyConfiguration) WithFailurePolicy(value v1.FailurePolicyType) *ImageVerificationPolicySpecApplyConfiguration {
	b.FailurePolicy = &value
	return b
}

// WithValidationAction adds the given value to the ValidationAction field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ValidationAction field.
func (b *ImageVerificationPolicySpecApplyConfiguration) WithValidationAction(values ...v1.ValidationAction) *ImageVerificationPolicySpecApplyConfiguration {
	for i := range values {
		b.ValidationAction = append(b.ValidationAction, values[i])
	}
	return b
}

// WithMatchConditions adds the given value to the MatchConditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the MatchConditions field.
func (b *ImageVerificationPolicySpecApplyConfiguration) WithMatchConditions(values ...v1.MatchCondition) *ImageVerificationPolicySpecApplyConfiguration {
	for i := range values {
		b.MatchConditions = append(b.MatchConditions, values[i])
	}
	return b
}

// WithVariables adds the given value to the Variables field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Variables field.
func (b *ImageVerificationPolicySpecApplyConfiguration) WithVariables(values ...v1.Variable) *ImageVerificationPolicySpecApplyConfiguration {
	for i := range values {
		b.Variables = append(b.Variables, values[i])
	}
	return b
}

// WithImageRules adds the given value to the ImageRules field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ImageRules field.
func (b *ImageVerificationPolicySpecApplyConfiguration) WithImageRules(values ...*ImageRuleApplyConfiguration) *ImageVerificationPolicySpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithImageRules")
		}
		b.ImageRules = append(b.ImageRules, *values[i])
	}
	return b
}

// WithMutateDigest sets the MutateDigest field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MutateDigest field is set to the value of the last call.
func (b *ImageVerificationPolicySpecApplyConfiguration) WithMutateDigest(value bool) *ImageVerificationPolicySpecApplyConfiguration {
	b.MutateDigest = &value
	return b
}

// WithVerifyDigest sets the VerifyDigest field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the VerifyDigest field is set to the value of the last call.
func (b *ImageVerificationPolicySpecApplyConfiguration) WithVerifyDigest(value bool) *ImageVerificationPolicySpecApplyConfiguration {
	b.VerifyDigest = &value
	return b
}

// WithRequired sets the Required field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Required field is set to the value of the last call.
func (b *ImageVerificationPolicySpecApplyConfiguration) WithRequired(value bool) *ImageVerificationPolicySpecApplyConfiguration {
	b.Required = &value
	return b
}

// WithCredentials sets the Credentials field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Credentials field is set to the value of the last call.
func (b *ImageVerificationPolicySpecApplyConfiguration) WithCredentials(value *CredentialsApplyConfiguration) *ImageVerificationPolicySpecApplyConfiguration {
	b.Credentials = value
	return b
}

// WithImages adds the given value to the Images field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Images field.
func (b *ImageVerificationPolicySpecApplyConfiguration) WithImages(values ...*ImageApplyConfiguration) *ImageVerificationPolicySpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithImages")
		}
		b.Images = append(b.Images, *values[i])
	}
	return b
}

// WithAttestors adds the given value to the Attestors field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Attestors field.
func (b *ImageVerificationPolicySpecApplyConfiguration) WithAttestors(values ...*AttestorApplyConfiguration) *ImageVerificationPolicySpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithAttestors")
		}
		b.Attestors = append(b.Attestors, *values[i])
	}
	return b
}

// WithAttestations adds the given value to the Attestations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Attestations field.
func (b *ImageVerificationPolicySpecApplyConfiguration) WithAttestations(values ...*AttestationApplyConfiguration) *ImageVerificationPolicySpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithAttestations")
		}
		b.Attestations = append(b.Attestations, *values[i])
	}
	return b
}

// WithVerifications adds the given value to the Verifications field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Verifications field.
func (b *ImageVerificationPolicySpecApplyConfiguration) WithVerifications(values ...v1.Validation) *ImageVerificationPolicySpecApplyConfiguration {
	for i := range values {
		b.Verifications = append(b.Verifications, values[i])
	}
	return b
}
