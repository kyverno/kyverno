/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v2

import (
	v2 "github.com/kyverno/kyverno/api/kyverno/v2"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PolicyExceptionLister helps list PolicyExceptions.
// All objects returned here must be treated as read-only.
type PolicyExceptionLister interface {
	// List lists all PolicyExceptions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v2.PolicyException, err error)
	// PolicyExceptions returns an object that can list and get PolicyExceptions.
	PolicyExceptions(namespace string) PolicyExceptionNamespaceLister
	PolicyExceptionListerExpansion
}

// policyExceptionLister implements the PolicyExceptionLister interface.
type policyExceptionLister struct {
	indexer cache.Indexer
}

// NewPolicyExceptionLister returns a new PolicyExceptionLister.
func NewPolicyExceptionLister(indexer cache.Indexer) PolicyExceptionLister {
	return &policyExceptionLister{indexer: indexer}
}

// List lists all PolicyExceptions in the indexer.
func (s *policyExceptionLister) List(selector labels.Selector) (ret []*v2.PolicyException, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v2.PolicyException))
	})
	return ret, err
}

// PolicyExceptions returns an object that can list and get PolicyExceptions.
func (s *policyExceptionLister) PolicyExceptions(namespace string) PolicyExceptionNamespaceLister {
	return policyExceptionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PolicyExceptionNamespaceLister helps list and get PolicyExceptions.
// All objects returned here must be treated as read-only.
type PolicyExceptionNamespaceLister interface {
	// List lists all PolicyExceptions in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v2.PolicyException, err error)
	// Get retrieves the PolicyException from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v2.PolicyException, error)
	PolicyExceptionNamespaceListerExpansion
}

// policyExceptionNamespaceLister implements the PolicyExceptionNamespaceLister
// interface.
type policyExceptionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PolicyExceptions in the indexer for a given namespace.
func (s policyExceptionNamespaceLister) List(selector labels.Selector) (ret []*v2.PolicyException, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v2.PolicyException))
	})
	return ret, err
}

// Get retrieves the PolicyException from the indexer for a given namespace and name.
func (s policyExceptionNamespaceLister) Get(name string) (*v2.PolicyException, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v2.Resource("policyexception"), name)
	}
	return obj.(*v2.PolicyException), nil
}
