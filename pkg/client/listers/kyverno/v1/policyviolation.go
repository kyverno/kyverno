/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/nirmata/kyverno/pkg/api/kyverno/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PolicyViolationLister helps list PolicyViolations.
type PolicyViolationLister interface {
	// List lists all PolicyViolations in the indexer.
	List(selector labels.Selector) (ret []*v1.PolicyViolation, err error)
	// PolicyViolations returns an object that can list and get PolicyViolations.
	PolicyViolations(namespace string) PolicyViolationNamespaceLister
	PolicyViolationListerExpansion
}

// policyViolationLister implements the PolicyViolationLister interface.
type policyViolationLister struct {
	indexer cache.Indexer
}

// NewPolicyViolationLister returns a new PolicyViolationLister.
func NewPolicyViolationLister(indexer cache.Indexer) PolicyViolationLister {
	return &policyViolationLister{indexer: indexer}
}

// List lists all PolicyViolations in the indexer.
func (s *policyViolationLister) List(selector labels.Selector) (ret []*v1.PolicyViolation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.PolicyViolation))
	})
	return ret, err
}

// PolicyViolations returns an object that can list and get PolicyViolations.
func (s *policyViolationLister) PolicyViolations(namespace string) PolicyViolationNamespaceLister {
	return policyViolationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PolicyViolationNamespaceLister helps list and get PolicyViolations.
type PolicyViolationNamespaceLister interface {
	// List lists all PolicyViolations in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.PolicyViolation, err error)
	// Get retrieves the PolicyViolation from the indexer for a given namespace and name.
	Get(name string) (*v1.PolicyViolation, error)
	PolicyViolationNamespaceListerExpansion
}

// policyViolationNamespaceLister implements the PolicyViolationNamespaceLister
// interface.
type policyViolationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PolicyViolations in the indexer for a given namespace.
func (s policyViolationNamespaceLister) List(selector labels.Selector) (ret []*v1.PolicyViolation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.PolicyViolation))
	})
	return ret, err
}

// Get retrieves the PolicyViolation from the indexer for a given namespace and name.
func (s policyViolationNamespaceLister) Get(name string) (*v1.PolicyViolation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("policyviolation"), name)
	}
	return obj.(*v1.PolicyViolation), nil
}
