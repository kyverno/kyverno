/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/nirmata/kyverno/pkg/api/kyverno/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NamespacedPolicyViolationLister helps list NamespacedPolicyViolations.
type NamespacedPolicyViolationLister interface {
	// List lists all NamespacedPolicyViolations in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.NamespacedPolicyViolation, err error)
	// NamespacedPolicyViolations returns an object that can list and get NamespacedPolicyViolations.
	NamespacedPolicyViolations(namespace string) NamespacedPolicyViolationNamespaceLister
	NamespacedPolicyViolationListerExpansion
}

// namespacedPolicyViolationLister implements the NamespacedPolicyViolationLister interface.
type namespacedPolicyViolationLister struct {
	indexer cache.Indexer
}

// NewNamespacedPolicyViolationLister returns a new NamespacedPolicyViolationLister.
func NewNamespacedPolicyViolationLister(indexer cache.Indexer) NamespacedPolicyViolationLister {
	return &namespacedPolicyViolationLister{indexer: indexer}
}

// List lists all NamespacedPolicyViolations in the indexer.
func (s *namespacedPolicyViolationLister) List(selector labels.Selector) (ret []*v1alpha1.NamespacedPolicyViolation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NamespacedPolicyViolation))
	})
	return ret, err
}

// NamespacedPolicyViolations returns an object that can list and get NamespacedPolicyViolations.
func (s *namespacedPolicyViolationLister) NamespacedPolicyViolations(namespace string) NamespacedPolicyViolationNamespaceLister {
	return namespacedPolicyViolationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NamespacedPolicyViolationNamespaceLister helps list and get NamespacedPolicyViolations.
type NamespacedPolicyViolationNamespaceLister interface {
	// List lists all NamespacedPolicyViolations in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.NamespacedPolicyViolation, err error)
	// Get retrieves the NamespacedPolicyViolation from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.NamespacedPolicyViolation, error)
	NamespacedPolicyViolationNamespaceListerExpansion
}

// namespacedPolicyViolationNamespaceLister implements the NamespacedPolicyViolationNamespaceLister
// interface.
type namespacedPolicyViolationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NamespacedPolicyViolations in the indexer for a given namespace.
func (s namespacedPolicyViolationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NamespacedPolicyViolation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NamespacedPolicyViolation))
	})
	return ret, err
}

// Get retrieves the NamespacedPolicyViolation from the indexer for a given namespace and name.
func (s namespacedPolicyViolationNamespaceLister) Get(name string) (*v1alpha1.NamespacedPolicyViolation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("namespacedpolicyviolation"), name)
	}
	return obj.(*v1alpha1.NamespacedPolicyViolation), nil
}
