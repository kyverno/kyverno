{{- $name := "disallow-capabilities-strict" }}
{{- if eq (include "kyverno-policies.podSecurityRestricted" (merge (dict "name" $name) .)) "true" }}
{{- include "kyverno-policies.supportedKyvernoCheck" (dict "top" . "ver" ">= 1.6.0-0") }}
apiVersion: kyverno.io/v1
kind: {{ .Values.policyKind }}
metadata:
  name: {{ $name }}
  annotations:
    {{- with .Values.autogenControllers }}
    pod-policies.kyverno.io/autogen-controllers: {{ . }}
    {{- end }}
    policies.kyverno.io/title: Disallow Capabilities (Strict)
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    {{- if .Values.podSecuritySeverity }}
    policies.kyverno.io/severity: {{ .Values.podSecuritySeverity | quote }}
    {{- end }}
    {{- if .Values.celEnabled }}
    policies.kyverno.io/minversion: 1.12.0
    {{- else }}
    policies.kyverno.io/minversion: 1.6.0
    {{- end }}
    kyverno.io/kyverno-version: {{ default .Chart.AppVersion (include "kyverno-policies.kyvernoVersion" .) }}
    kyverno.io/kubernetes-version: "{{ default .Chart.KubeVersion .Values.kubeVersionOverride }}"
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/description: >-
      Adding capabilities other than `NET_BIND_SERVICE` is disallowed. In addition,
      all containers must explicitly drop `ALL` capabilities.
    {{- include "kyverno-policies.customAnnotations" . | nindent 4 }}
  labels: {{ include "kyverno-policies.labels" . | nindent 4 }}
spec:
  validationFailureAction: {{ .Values.validationFailureAction }}
  background: {{ .Values.background }}
  failurePolicy: {{ .Values.failurePolicy }}
  rules:
    - name: require-drop-all
      match:
        any:
        - resources:
            kinds:
              - Pod
      {{- with merge (index .Values "policyExclude" "require-drop-all") (index .Values "policyExclude" $name) }}
      exclude:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- $preconditions1 :=  merge (index .Values "policyPreconditions" "require-drop-all") (index .Values "policyPreconditions" $name) }}
      {{- if $preconditions1 }}
      {{- with $preconditions1 }}
      preconditions:
        {{- if .all }}
        all:
        - key: "{{`{{ request.operation || 'BACKGROUND' }}`}}"
          operator: NotEquals
          value: DELETE
        {{- toYaml .all | nindent 8 }}
        {{- else }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- end }}
      {{- else }}
      preconditions:
        all:
        - key: "{{`{{ request.operation || 'BACKGROUND' }}`}}"
          operator: NotEquals
          value: DELETE
      {{- end }}
      {{- if not (quote .Values.skipBackgroundRequests | empty)  }}
      skipBackgroundRequests: {{ .Values.skipBackgroundRequests }}
      {{- end }}
      validate:
        message: >-
          Containers must drop `ALL` capabilities.
        {{- if .Values.celEnabled }}
        # Using CEL for validation
        cel:
          expressions:
            - expression: |
                object.spec.containers.all(container,
                  has(container.securityContext) &&
                  has(container.securityContext.capabilities) &&
                  has(container.securityContext.capabilities.drop) &&
                  container.securityContext.capabilities.drop.exists(cap, cap == "ALL")
                )
              message: "All containers must drop ALL capabilities."
            - expression: |
                !has(object.spec.initContainers) ||
                object.spec.initContainers.all(container,
                  has(container.securityContext) &&
                  has(container.securityContext.capabilities) &&
                  has(container.securityContext.capabilities.drop) &&
                  container.securityContext.capabilities.drop.exists(cap, cap == "ALL")
                )
              message: "All initContainers must drop ALL capabilities."
            - expression: |
                !has(object.spec.ephemeralContainers) ||
                object.spec.ephemeralContainers.all(container,
                  has(container.securityContext) &&
                  has(container.securityContext.capabilities) &&
                  has(container.securityContext.capabilities.drop) &&
                  container.securityContext.capabilities.drop.exists(cap, cap == "ALL")
                )
              message: "All ephemeralContainers must drop ALL capabilities."
        {{- else }}
        foreach:
          - list: request.object.spec.[ephemeralContainers, initContainers, containers][]
            deny:
              conditions:
                all:
                - key: ALL
                  operator: AnyNotIn
                  value: "{{`{{`}} element.securityContext.capabilities.drop[] || `[]` {{`}}`}}"
        {{- end }}
    - name: adding-capabilities-strict
      match:
        any:
        - resources:
            kinds:
              - Pod
      {{- with merge (index .Values "policyExclude" "adding-capabilities-strict") (index .Values "policyExclude" $name) }}
      exclude:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- $preconditions2 := merge (index .Values "policyPreconditions" "adding-capabilities-strict") (index .Values "policyPreconditions" $name) }}
      {{- if $preconditions2 }}
      {{- with $preconditions2 }}
      preconditions:
        {{- if .all }}
        all:
        - key: "{{`{{ request.operation || 'BACKGROUND' }}`}}"
          operator: NotEquals
          value: DELETE
        {{- toYaml .all | nindent 8 }}
        {{- else }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- end }}
      {{- else }}
      preconditions:
        all:
        - key: "{{`{{ request.operation || 'BACKGROUND' }}`}}"
          operator: NotEquals
          value: DELETE
      {{- end }}
      {{- if not (quote .Values.skipBackgroundRequests | empty)  }}
      skipBackgroundRequests: {{ .Values.skipBackgroundRequests }}
      {{- end }}
      {{- with index .Values "validationFailureActionByPolicy" $name }}
      validationFailureAction: {{ toYaml . }}
      {{- else }}
      validationFailureAction: {{ .Values.validationFailureAction }}
      {{- end }}
      {{- with concat (index .Values "validationFailureActionOverrides" "all") (default list (index .Values "validationFailureActionOverrides" $name)) }}
      validationFailureActionOverrides: {{ toYaml . | nindent 8 }}
      {{- end }}
      validate:
        message: >-
          Any capabilities added other than NET_BIND_SERVICE are disallowed.
        {{- if .Values.celEnabled }}
        # Using CEL for validation
        cel:
          expressions:
            - expression: |
                object.spec.containers.all(container,
                  !has(container.securityContext) ||
                  !has(container.securityContext.capabilities) ||
                  !has(container.securityContext.capabilities.add) ||
                  container.securityContext.capabilities.add.size() == 0 ||
                  (container.securityContext.capabilities.add.size() == 1 &&
                   container.securityContext.capabilities.add[0] == "NET_BIND_SERVICE")
                )
              message: "Only the capability NET_BIND_SERVICE may be added to containers."
            - expression: |
                !has(object.spec.initContainers) ||
                object.spec.initContainers.all(container,
                  !has(container.securityContext) ||
                  !has(container.securityContext.capabilities) ||
                  !has(container.securityContext.capabilities.add) ||
                  container.securityContext.capabilities.add.size() == 0 ||
                  (container.securityContext.capabilities.add.size() == 1 &&
                   container.securityContext.capabilities.add[0] == "NET_BIND_SERVICE")
                )
              message: "Only the capability NET_BIND_SERVICE may be added to initContainers."
            - expression: |
                !has(object.spec.ephemeralContainers) ||
                object.spec.ephemeralContainers.all(container,
                  !has(container.securityContext) ||
                  !has(container.securityContext.capabilities) ||
                  !has(container.securityContext.capabilities.add) ||
                  container.securityContext.capabilities.add.size() == 0 ||
                  (container.securityContext.capabilities.add.size() == 1 &&
                   container.securityContext.capabilities.add[0] == "NET_BIND_SERVICE")
                )
              message: "Only the capability NET_BIND_SERVICE may be added to ephemeralContainers."
        {{- else }}
        foreach:
          - list: request.object.spec.[ephemeralContainers, initContainers, containers][]
            deny:
              conditions:
                all:
                - key: "{{`{{`}} element.securityContext.capabilities.add[] || `[]` {{`}}`}}"
                  operator: AnyNotIn
                  value:
                  - NET_BIND_SERVICE
                  - ''
        {{- end }}
{{- end }}
