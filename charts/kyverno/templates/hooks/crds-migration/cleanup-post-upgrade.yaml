{{- if .Values.cleanupController.enabled -}}
{{- if and .Values.crdsMigration.cleanuppolicies.enabled (not .Values.templating.enabled) -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ template "kyverno.fullname" . }}-hook-post-upgrade-cleanuppolicies-migration
  namespace: {{ template "kyverno.namespace" . }}
  labels:
    {{- include "kyverno.hooks.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": post-upgrade
    "helm.sh/hook-delete-policy": hook-succeeded,hook-failed
spec:
  backoffLimit: 2
  template:
    metadata:
      {{- with .Values.crdsMigration.podLabels }}
      labels:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      serviceAccount: {{ template "kyverno.cleanup-controller.serviceAccountName" . }}
      {{- with .Values.crdsMigration.podSecurityContext }}
      securityContext:
        {{- tpl (toYaml .) $ | nindent 8 }}
      {{- end }}
      restartPolicy: Never
      containers:
        - name: kubectl
          image: {{ (include "kyverno.image" (dict "globalRegistry" ((.Values.global).image).registry "image" .Values.crdsMigration.image "defaultTag" (default .Chart.AppVersion .Values.crdsMigration.image.tag))) | quote }}
          imagePullPolicy: {{ .Values.crdsMigration.image.pullPolicy }}
          command:
            - /bin/bash
            - -c
            - |
              NAMESPACES=$(kubectl get namespaces -o=jsonpath='{.items[*].metadata.name}')

              for ns in $NAMESPACES; do
                # Get cleanup policies
                CLEANUP_POLICIES=$(kubectl get cleanpol -n $ns -o=jsonpath='{.items[*].metadata.name}')

                # Check if there are any cleanup policies
                if [ -z "$CLEANUP_POLICIES" ]; then
                echo "No cleanup policies found in the namespace: $ns"
                fi

                # Reapply each cleanup policy
                for pol in $CLEANUP_POLICIES; do
                  echo "Reapplying cleanup policy: $pol"
                  kubectl apply -f <(kubectl get cleanpol -n $ns $pol -o=json)
                done
              done

              # Get clustercleanup policies
              CCLEANUP_POLICIES=$(kubectl get ccleanpol -o=jsonpath='{.items[*].metadata.name}')

              # Check if there are any clustercleanup policies
              if [ -z "$CCLEANUP_POLICIES" ]; then
              echo "No clustercleanup policies found."
              fi

              # Reapply each clustercleanup policy
              for pol in $CCLEANUP_POLICIES; do
                echo "Reapplying clustercleanup policy: $pol"
                kubectl apply -f <(kubectl get ccleanpol $pol -o=json)
              done
          {{- with .Values.crdsMigration.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      {{- with .Values.crdsMigration.imagePullSecrets }}
      imagePullSecrets:
        {{- tpl (toYaml .) $ | nindent 8 }}
      {{- end }}
      {{- with .Values.crdsMigration.tolerations }}
      tolerations:
        {{- tpl (toYaml .) $ | nindent 8 }}
      {{- end }}
      {{- with .Values.crdsMigration.nodeSelector | default .Values.global.nodeSelector }}
      nodeSelector:
        {{- tpl (toYaml .) $ | nindent 8 }}
      {{- end }}
      {{- if or .Values.crdsMigration.podAntiAffinity .Values.crdsMigration.podAffinity .Values.crdsMigration.nodeAffinity }}
      affinity:
        {{- with .Values.crdsMigration.podAntiAffinity }}
        podAntiAffinity:
          {{- tpl (toYaml .) $ | nindent 10 }}
        {{- end }}
        {{- with .Values.crdsMigration.podAffinity }}
        podAffinity:
          {{- tpl (toYaml .) $ | nindent 10 }}
        {{- end }}
        {{- with .Values.crdsMigration.nodeAffinity }}
        nodeAffinity:
          {{- tpl (toYaml .) $ | nindent 10 }}
        {{- end }}
      {{- end }}
{{- end -}}
{{- end -}}
