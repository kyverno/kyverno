---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: example
spec:
  admission: true
  background: true
  rules:
  - context:
    - name: example
      variable:
        value:
          test:
            nested:
              value: 1
    match:
      any:
      - resources:
          kinds:
          - Pod
    name: defined-value
    validate:
      failureAction: Audit
      deny:
        conditions:
        - key: '{{ example.test.nested.value }}'
          operator: NotEquals
          value: 1
  - context:
    - name: objName
      variable:
        jmesPath: request.object.metadata.name
    match:
      any:
      - resources:
          kinds:
          - Pod
    name: defined-jmespath
    validate:
      failureAction: Audit
      deny:
        conditions:
        - key: '{{ objName }}'
          operator: NotEquals
          value: example
  - context:
    - name: objName
      variable:
        default: example
        jmesPath: request.object.metadata.generateName
    match:
      any:
      - resources:
          kinds:
          - Pod
    name: defined-jmespath-with-default
    validate:
      failureAction: Audit
      deny:
        conditions:
        - key: '{{ objName }}'
          operator: NotEquals
          value: example
  - context:
    - name: obj
      variable:
        value:
          name: '{{ request.object.metadata.name }}'
    match:
      any:
      - resources:
          kinds:
          - Pod
    name: defined-value-with-variable
    validate:
      failureAction: Audit
      deny:
        conditions:
        - key: '{{ obj.name }}'
          operator: NotEquals
          value: example
  - context:
    - name: objName
      variable:
        default: '{{ request.object.metadata.name }}'
        jmesPath: request.object.metadata.generateName
    match:
      any:
      - resources:
          kinds:
          - Pod
    name: defined-jmespath-with-default-variable
    validate:
      failureAction: Audit
      deny:
        conditions:
        - key: '{{ objName }}'
          operator: NotEquals
          value: example
  - context:
    - name: objName
      variable:
        jmesPath: name
        value:
          name: '{{ request.object.metadata.name }}'
    match:
      any:
      - resources:
          kinds:
          - Pod
    name: defined-value-jmespath
    validate:
      failureAction: Audit
      deny:
        conditions:
        - key: '{{ objName }}'
          operator: NotEquals
          value: example
  - context:
    - name: jpExpression
      variable:
        value: name
    - name: objName
      variable:
        jmesPath: '{{ jpExpression }}'
        value:
          name: '{{ request.object.metadata.name }}'
    match:
      any:
      - resources:
          kinds:
          - Pod
    name: defined-value-jmespath-variable
    validate:
      failureAction: Audit
      deny:
        conditions:
        - key: '{{ objName }}'
          operator: NotEquals
          value: example
  - context:
    - name: obj
      variable:
        value:
          notName: not-example
    - name: obj
      variable:
        value:
          name: example
    match:
      any:
      - resources:
          kinds:
          - Pod
    name: value-override
    validate:
      failureAction: Audit
      deny:
        conditions:
          any:
          - key: '{{ obj.name }}'
            operator: NotEquals
            value: example
          - key: '{{ to_string(obj.notName) }}'
            operator: NotEquals
            value: "null"
  - context:
    - name: obj
      variable:
        value:
        - A=ATest
        - B=BTest
    match:
      any:
      - resources:
          kinds:
          - Pod
    name: wildcard-match
    validate:
      failureAction: Audit
      deny:
        conditions:
        - key: A=*
          operator: AnyNotIn
          value: '{{ obj }}'
  - context:
    - name: obj
      variable:
        jmesPath: items(@, 'key', 'value')
        value:
          a: 1
          b: 2
    - name: expected
      variable:
        value:
        - key: a
          value: 1
        - key: b
          value: 2
    match:
      any:
      - resources:
          kinds:
          - Pod
    name: items
    validate:
      failureAction: Audit
      deny:
        conditions:
        - key: '{{ obj }}'
          operator: NotEqual
          value: '{{ expected }}'
  - context:
    - name: obj
      variable:
        value:
          a: 1
          b: 2
    - name: modifiedObj
      variable:
        jmesPath: items(obj, 'key', 'value')
    - name: expected
      variable:
        value:
        - key: a
          value: 1
        - key: b
          value: 2
    match:
      any:
      - resources:
          kinds:
          - Pod
    name: unused-var
    validate:
      failureAction: Audit
      deny:
        conditions:
        - key: '{{ modifiedObj }}'
          operator: NotEqual
          value: '{{ expected }}'
